
s.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000104c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a0  080011a0  000111a8  2**0
                  CONTENTS
  4 .ARM          00000000  080011a0  080011a0  000111a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a0  080011a8  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000000  080011a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  080011a8  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cbe  00000000  00000000  000111d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011d2  00000000  00000000  00017e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001664  00000000  00000000  00019061  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000370  00000000  00000000  0001a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  0001aa38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00005625  00000000  00000000  0001ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000038b7  00000000  00000000  00020345  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013815  00000000  00000000  00023bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00037411  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b8c  00000000  00000000  0003748c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001164 	.word	0x08001164

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001164 	.word	0x08001164

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	20000070 	.word	0x20000070

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	20000070 	.word	0x20000070

080001cc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	20000070 	.word	0x20000070

080001f0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	20000070 	.word	0x20000070

08000214 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	20000070 	.word	0x20000070

08000238 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x22>
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x40>
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x5e>
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x7c>
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x9a>
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4798      	blx	r3

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	20000070 	.word	0x20000070

080002e0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d008      	beq.n	8000302 <EXTI15_10_IRQHandler+0x22>
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6153      	str	r3, [r2, #20]
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 80002fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000300:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030a:	2b00      	cmp	r3, #0
 800030c:	d008      	beq.n	8000320 <EXTI15_10_IRQHandler+0x40>
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a22      	ldr	r2, [pc, #136]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000328:	2b00      	cmp	r3, #0
 800032a:	d008      	beq.n	800033e <EXTI15_10_IRQHandler+0x5e>
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000336:	6153      	str	r3, [r2, #20]
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d008      	beq.n	800035c <EXTI15_10_IRQHandler+0x7c>
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI15_10_IRQHandler+0x9a>
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000378:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI15_10_IRQHandler+0xb8>
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000396:	4798      	blx	r3

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40010400 	.word	0x40010400
 80003a0:	20000070 	.word	0x20000070

080003a4 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 80003ba:	4b37      	ldr	r3, [pc, #220]	; (8000498 <I2C1_EV_IRQHandler+0xe8>)
 80003bc:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c6:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003d0:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f003 0310 	and.w	r3, r3, #16
 80003da:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00a      	beq.n	80003f8 <I2C1_EV_IRQHandler+0x48>
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80003f0:	2100      	movs	r1, #0
 80003f2:	6978      	ldr	r0, [r7, #20]
 80003f4:	f000 f852 	bl	800049c <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d012      	beq.n	800042e <I2C1_EV_IRQHandler+0x7e>
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d00f      	beq.n	800042e <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	2b00      	cmp	r3, #0
 8000418:	d109      	bne.n	800042e <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000426:	2102      	movs	r1, #2
 8000428:	6978      	ldr	r0, [r7, #20]
 800042a:	f000 f837 	bl	800049c <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000436:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d00f      	beq.n	800045e <I2C1_EV_IRQHandler+0xae>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d00c      	beq.n	800045e <I2C1_EV_IRQHandler+0xae>
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d009      	beq.n	800045e <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d103      	bne.n	800045e <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000456:	2103      	movs	r1, #3
 8000458:	6978      	ldr	r0, [r7, #20]
 800045a:	f000 f81f 	bl	800049c <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000466:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00f      	beq.n	800048e <I2C1_EV_IRQHandler+0xde>
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00c      	beq.n	800048e <I2C1_EV_IRQHandler+0xde>
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d009      	beq.n	800048e <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d103      	bne.n	800048e <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000486:	2104      	movs	r1, #4
 8000488:	6978      	ldr	r0, [r7, #20]
 800048a:	f000 f807 	bl	800049c <Slave_States>
			}
		}



}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40005400 	.word	0x40005400

0800049c <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a32      	ldr	r2, [pc, #200]	; (8000574 <Slave_States+0xd8>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	73fb      	strb	r3, [r7, #15]

	switch (state)
 80004b8:	78fb      	ldrb	r3, [r7, #3]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d856      	bhi.n	800056c <Slave_States+0xd0>
 80004be:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <Slave_States+0x28>)
 80004c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c4:	080004df 	.word	0x080004df
 80004c8:	080004d9 	.word	0x080004d9
 80004cc:	08000503 	.word	0x08000503
 80004d0:	0800051b 	.word	0x0800051b
 80004d4:	0800053f 	.word	0x0800053f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80004dc:	e046      	b.n	800056c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d03b      	beq.n	8000562 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80004ea:	7bfa      	ldrb	r2, [r7, #15]
 80004ec:	4922      	ldr	r1, [pc, #136]	; (8000578 <Slave_States+0xdc>)
 80004ee:	4613      	mov	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	4413      	add	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	440b      	add	r3, r1
 80004f8:	3320      	adds	r3, #32
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2000      	movs	r0, #0
 80004fe:	4798      	blx	r3
		}

		break ;
 8000500:	e02f      	b.n	8000562 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000502:	7bfa      	ldrb	r2, [r7, #15]
 8000504:	491c      	ldr	r1, [pc, #112]	; (8000578 <Slave_States+0xdc>)
 8000506:	4613      	mov	r3, r2
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	3320      	adds	r3, #32
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2002      	movs	r0, #2
 8000516:	4798      	blx	r3

		break ;
 8000518:	e028      	b.n	800056c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	2b00      	cmp	r3, #0
 8000524:	d01f      	beq.n	8000566 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000526:	7bfa      	ldrb	r2, [r7, #15]
 8000528:	4913      	ldr	r1, [pc, #76]	; (8000578 <Slave_States+0xdc>)
 800052a:	4613      	mov	r3, r2
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	4413      	add	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	440b      	add	r3, r1
 8000534:	3320      	adds	r3, #32
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2003      	movs	r0, #3
 800053a:	4798      	blx	r3
		}

		break ;
 800053c:	e013      	b.n	8000566 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10f      	bne.n	800056a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800054a:	7bfa      	ldrb	r2, [r7, #15]
 800054c:	490a      	ldr	r1, [pc, #40]	; (8000578 <Slave_States+0xdc>)
 800054e:	4613      	mov	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	4413      	add	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	3320      	adds	r3, #32
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2004      	movs	r0, #4
 800055e:	4798      	blx	r3
		}

		break ;
 8000560:	e003      	b.n	800056a <Slave_States+0xce>
		break ;
 8000562:	bf00      	nop
 8000564:	e002      	b.n	800056c <Slave_States+0xd0>
		break ;
 8000566:	bf00      	nop
 8000568:	e000      	b.n	800056c <Slave_States+0xd0>
		break ;
 800056a:	bf00      	nop
	}
	}

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40005400 	.word	0x40005400
 8000578:	2000001c 	.word	0x2000001c

0800057c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <SPI1_IRQHandler>:
 * 							Generic Functions
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <SPI1_IRQHandler+0x54>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	793b      	ldrb	r3, [r7, #4]
 80005a8:	f362 0300 	bfi	r3, r2, #0, #1
 80005ac:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <SPI1_IRQHandler+0x54>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	793b      	ldrb	r3, [r7, #4]
 80005ba:	f362 0341 	bfi	r3, r2, #1, #1
 80005be:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <SPI1_IRQHandler+0x54>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	f362 0382 	bfi	r3, r2, #2, #1
 80005d2:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SPI1_IRQHandler+0x58>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	7938      	ldrb	r0, [r7, #4]
 80005dc:	4798      	blx	r3

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40013000 	.word	0x40013000
 80005ec:	20000064 	.word	0x20000064

080005f0 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <SPI2_IRQHandler+0x54>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	085b      	lsrs	r3, r3, #1
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	793b      	ldrb	r3, [r7, #4]
 8000604:	f362 0300 	bfi	r3, r2, #0, #1
 8000608:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <SPI2_IRQHandler+0x54>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	793b      	ldrb	r3, [r7, #4]
 8000616:	f362 0341 	bfi	r3, r2, #1, #1
 800061a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <SPI2_IRQHandler+0x54>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	793b      	ldrb	r3, [r7, #4]
 800062a:	f362 0382 	bfi	r3, r2, #2, #1
 800062e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SPI2_IRQHandler+0x58>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	7938      	ldrb	r0, [r7, #4]
 8000638:	4798      	blx	r3
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40003800 	.word	0x40003800
 8000648:	20000064 	.word	0x20000064

0800064c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <USART1_IRQHandler+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	4798      	blx	r3

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000006c 	.word	0x2000006c

08000660 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <USART2_IRQHandler+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	4798      	blx	r3

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000006c 	.word	0x2000006c

08000674 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <USART3_IRQHandler+0x10>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	4798      	blx	r3


}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000006c 	.word	0x2000006c

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0152      	lsls	r2, r2, #5
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0152      	lsls	r2, r2, #5
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006ec:	d301      	bcc.n	80006f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ee:	2301      	movs	r3, #1
 80006f0:	e00f      	b.n	8000712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <SysTick_Config+0x40>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006fa:	2107      	movs	r1, #7
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	f7ff ffc2 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <SysTick_Config+0x40>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <SysTick_Config+0x40>)
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	e000e010 	.word	0xe000e010

08000720 <HardFault_Handler>:
#include "CortexMX_OS_Porting.h"

unsigned char systickled;

void  HardFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	while(1);
 8000724:	e7fe      	b.n	8000724 <HardFault_Handler+0x4>

08000726 <MemManage_Handler>:
}
void	MemManage_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
	while(1);
 800072a:	e7fe      	b.n	800072a <MemManage_Handler+0x4>

0800072c <BusFault_Handler>:
}
void	BusFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	while(1);
 8000730:	e7fe      	b.n	8000730 <BusFault_Handler+0x4>

08000732 <UsageFault_Handler>:
}
void	UsageFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
	while(1);
 8000736:	e7fe      	b.n	8000736 <UsageFault_Handler+0x4>

08000738 <SVC_Handler>:
}


__attribute((naked)) void SVC_Handler()
{
	__asm("tst lr,#4 \n\t"
 8000738:	f01e 0f04 	tst.w	lr, #4
 800073c:	bf0c      	ite	eq
 800073e:	f3ef 8008 	mrseq	r0, MSP
 8000742:	f3ef 8009 	mrsne	r0, PSP
 8000746:	f000 bb9b 	b.w	8000e80 <OS_SVC_Service>
			"ITE EQ \n\t"
			"mrseq r0,MSP\n\t"
			"mrsne r0, PSP \n\t"
			"b OS_SVC_Service");
}
 800074a:	bf00      	nop

0800074c <hw_init>:


void hw_init()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	//x=8000 count


	//	decrease PenSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	//SysTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 8000750:	210f      	movs	r1, #15
 8000752:	f06f 0001 	mvn.w	r0, #1
 8000756:	f7ff ff97 	bl	8000688 <__NVIC_SetPriority>

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <trigger_os_pendsv>:

void trigger_os_pendsv()
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <trigger_os_pendsv+0x18>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <trigger_os_pendsv+0x18>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6053      	str	r3, [r2, #4]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Start_Ticker>:


void Start_Ticker()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//	8 MHZ
	//	1 count -> 0.125 us
	//	X count -> 1 ms
	//	X = 8000 Count

	 SysTick_Config(8000);
 8000780:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000784:	f7ff ffaa 	bl	80006dc <SysTick_Config>

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

void SysTick_Handler()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	systickled ^=1;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <SysTick_Handler+0x20>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f083 0301 	eor.w	r3, r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Handler+0x20>)
 800079c:	701a      	strb	r2, [r3, #0]
	decide_whatnext();
 800079e:	f000 fb1d 	bl	8000ddc <decide_whatnext>
	trigger_os_pendsv();
 80007a2:	f7ff ffdd 	bl	8000760 <trigger_os_pendsv>

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000ac 	.word	0x200000ac

080007b0 <FIFO_init>:



#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]

	if(!buff )
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80007c2:	2303      	movs	r3, #3
 80007c4:	e011      	b.n	80007ea <FIFO_init+0x3a>

	fifo->base = buff ;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	68da      	ldr	r2, [r3, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80007e8:	2300      	movs	r3, #0

}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <FIFO_enqueue+0x1a>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800080e:	2303      	movs	r3, #3
 8000810:	e02d      	b.n	800086e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	429a      	cmp	r2, r3
 800081c:	d107      	bne.n	800082e <FIFO_enqueue+0x3a>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	429a      	cmp	r2, r3
 8000828:	d101      	bne.n	800082e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800082a:	2301      	movs	r3, #1
 800082c:	e01f      	b.n	800086e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	68d2      	ldr	r2, [r2, #12]
 8000848:	4611      	mov	r1, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6912      	ldr	r2, [r2, #16]
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	440a      	add	r2, r1
 8000852:	3a04      	subs	r2, #4
 8000854:	4293      	cmp	r3, r2
 8000856:	d104      	bne.n	8000862 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	e004      	b.n	800086c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	1d1a      	adds	r2, r3, #4
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800086c:	2300      	movs	r3, #0


}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <FIFO_dequeue+0x1a>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000892:	2303      	movs	r3, #3
 8000894:	e028      	b.n	80008e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d101      	bne.n	80008a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80008a2:	2302      	movs	r3, #2
 80008a4:	e020      	b.n	80008e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68d2      	ldr	r2, [r2, #12]
 80008c2:	4611      	mov	r1, r2
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6912      	ldr	r2, [r2, #16]
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	440a      	add	r2, r1
 80008cc:	3a04      	subs	r2, #4
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d104      	bne.n	80008dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68da      	ldr	r2, [r3, #12]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	e004      	b.n	80008e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	1d1a      	adds	r2, r3, #4
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.Curren_Task->current_PSP);
 80008f4:	4b6c      	ldr	r3, [pc, #432]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80008f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fa:	f3ef 8009 	mrs	r0, PSP
 80008fe:	4602      	mov	r2, r0
 8000900:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.Curren_Task->current_PSP-- ;
 8000902:	4b69      	ldr	r3, [pc, #420]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000904:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	3a04      	subs	r2, #4
 800090c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 800090e:	4b66      	ldr	r3, [pc, #408]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000910:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4622      	mov	r2, r4
 8000918:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 800091a:	4b63      	ldr	r3, [pc, #396]	; (8000aa8 <PendSV_Handler+0x1b4>)
 800091c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000920:	699a      	ldr	r2, [r3, #24]
 8000922:	3a04      	subs	r2, #4
 8000924:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000926:	4b60      	ldr	r3, [pc, #384]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000928:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	462a      	mov	r2, r5
 8000930:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 8000932:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000934:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000938:	699a      	ldr	r2, [r3, #24]
 800093a:	3a04      	subs	r2, #4
 800093c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000940:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4632      	mov	r2, r6
 8000948:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <PendSV_Handler+0x1b4>)
 800094c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000950:	699a      	ldr	r2, [r3, #24]
 8000952:	3a04      	subs	r2, #4
 8000954:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000956:	4b54      	ldr	r3, [pc, #336]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000958:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	463a      	mov	r2, r7
 8000960:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 8000962:	4b51      	ldr	r3, [pc, #324]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000964:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	3a04      	subs	r2, #4
 800096c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000970:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4642      	mov	r2, r8
 8000978:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 800097a:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <PendSV_Handler+0x1b4>)
 800097c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000980:	699a      	ldr	r2, [r3, #24]
 8000982:	3a04      	subs	r2, #4
 8000984:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000986:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000988:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	464a      	mov	r2, r9
 8000990:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000994:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	3a04      	subs	r2, #4
 800099c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4652      	mov	r2, sl
 80009a8:	601a      	str	r2, [r3, #0]
	OS_Control.Curren_Task->current_PSP-- ;
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	3a04      	subs	r2, #4
 80009b4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.Curren_Task->current_PSP))  );
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	465a      	mov	r2, fp
 80009c0:	601a      	str	r2, [r3, #0]

	//====================================
	//Restore the Context of the Next Task
	//====================================

	OS_Control.Curren_Task= OS_Control.Next_Task;
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009c8:	4a37      	ldr	r2, [pc, #220]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009ca:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.Next_Task=NULL;
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4


	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	469b      	mov	fp, r3
	OS_Control.Curren_Task->current_PSP++ ;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	3204      	adds	r2, #4
 80009ec:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	469a      	mov	sl, r3
	OS_Control.Curren_Task->current_PSP++ ;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <PendSV_Handler+0x1b4>)
 80009fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	3204      	adds	r2, #4
 8000a04:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a08:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4699      	mov	r9, r3
	OS_Control.Curren_Task->current_PSP++ ;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a14:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a18:	699a      	ldr	r2, [r3, #24]
 8000a1a:	3204      	adds	r2, #4
 8000a1c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a20:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4698      	mov	r8, r3
	OS_Control.Curren_Task->current_PSP++ ;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a30:	699a      	ldr	r2, [r3, #24]
 8000a32:	3204      	adds	r2, #4
 8000a34:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a38:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	461f      	mov	r7, r3
	OS_Control.Curren_Task->current_PSP++ ;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a44:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a48:	699a      	ldr	r2, [r3, #24]
 8000a4a:	3204      	adds	r2, #4
 8000a4c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	461e      	mov	r6, r3
	OS_Control.Curren_Task->current_PSP++ ;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a5c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a60:	699a      	ldr	r2, [r3, #24]
 8000a62:	3204      	adds	r2, #4
 8000a64:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a68:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	461d      	mov	r5, r3
	OS_Control.Curren_Task->current_PSP++ ;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	3204      	adds	r2, #4
 8000a7c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.Curren_Task->current_PSP))  );
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461c      	mov	r4, r3
	OS_Control.Curren_Task->current_PSP++ ;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a90:	699a      	ldr	r2, [r3, #24]
 8000a92:	3204      	adds	r2, #4
 8000a94:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.Curren_Task->current_PSP);
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <PendSV_Handler+0x1b4>)
 8000a98:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 8000aa4:	4770      	bx	lr



}
 8000aa6:	bf00      	nop
 8000aa8:	200000c4 	.word	0x200000c4

08000aac <MYRTOS_Create_MainStack>:




void MYRTOS_Create_MainStack()
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task =  &_estack;
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <MYRTOS_Create_MainStack+0x34>)
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MYRTOS_Create_MainStack+0x38>)
 8000ab4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task  - Main_Stack_size;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MYRTOS_Create_MainStack+0x38>)
 8000aba:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000abe:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <MYRTOS_Create_MainStack+0x38>)
 8000ac4:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task -8);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MYRTOS_Create_MainStack+0x38>)
 8000aca:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000ace:	3b08      	subs	r3, #8
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <MYRTOS_Create_MainStack+0x38>)
 8000ad2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20002800 	.word	0x20002800
 8000ae4:	200000c4 	.word	0x200000c4

08000ae8 <IDLE_Task>:

unsigned char ideltaskled;
void IDLE_Task(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

	while(1)
	{
		ideltaskled ^=1;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <IDLE_Task+0x18>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	f083 0301 	eor.w	r3, r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <IDLE_Task+0x18>)
 8000af8:	701a      	strb	r2, [r3, #0]
		__asm("nop");
 8000afa:	bf00      	nop
		ideltaskled ^=1;
 8000afc:	e7f6      	b.n	8000aec <IDLE_Task+0x4>
 8000afe:	bf00      	nop
 8000b00:	20000270 	.word	0x20000270

08000b04 <MYRTOS_init>:
	}

}

MYRTOS_error_ID MYRTOS_init()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	MYRTOS_error_ID error= noerror;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID= OSsuspend;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MYRTOS_init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN Stack for OS
	MYRTOS_Create_MainStack();
 8000b16:	f7ff ffc9 	bl	8000aac <MYRTOS_Create_MainStack>
	//Create OS Ready Queue
	if(FIFO_init(&Ready_Queue, Ready_Queue_FIFO, 100) != FIFO_NO_ERROR)
 8000b1a:	2264      	movs	r2, #100	; 0x64
 8000b1c:	4913      	ldr	r1, [pc, #76]	; (8000b6c <MYRTOS_init+0x68>)
 8000b1e:	4814      	ldr	r0, [pc, #80]	; (8000b70 <MYRTOS_init+0x6c>)
 8000b20:	f7ff fe46 	bl	80007b0 <FIFO_init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <MYRTOS_init+0x2c>
		error += Ready_Queue_init_error;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	71fb      	strb	r3, [r7, #7]
	//Configure IDLE TASK

	strcpy (IDLE_TASK.taskName, "idleTask");
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MYRTOS_init+0x70>)
 8000b32:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <MYRTOS_init+0x74>)
 8000b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b36:	c303      	stmia	r3!, {r0, r1}
 8000b38:	701a      	strb	r2, [r3, #0]
	IDLE_TASK.priority=255;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MYRTOS_init+0x78>)
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	711a      	strb	r2, [r3, #4]
	IDLE_TASK.p_tackEntry= IDLE_Task;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MYRTOS_init+0x78>)
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MYRTOS_init+0x7c>)
 8000b44:	611a      	str	r2, [r3, #16]
	IDLE_TASK.Stack_size=300;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MYRTOS_init+0x78>)
 8000b48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b4c:	601a      	str	r2, [r3, #0]

	error += MYRTOS_Create_Task(&IDLE_TASK);
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MYRTOS_init+0x78>)
 8000b50:	f000 f856 	bl	8000c00 <MYRTOS_Create_Task>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	71fb      	strb	r3, [r7, #7]


	return error;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]

}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000c4 	.word	0x200000c4
 8000b6c:	200002b8 	.word	0x200002b8
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	20000290 	.word	0x20000290
 8000b78:	0800117c 	.word	0x0800117c
 8000b7c:	20000274 	.word	0x20000274
 8000b80:	08000ae9 	.word	0x08000ae9

08000b84 <MYRTOS_Create_stackoftask>:

void MYRTOS_Create_stackoftask(Task_ref* Tref)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */
	Tref->current_PSP= Tref->_S_PSP_Task;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	461a      	mov	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	619a      	str	r2, [r3, #24]

	Tref->current_PSP--;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	1f1a      	subs	r2, r3, #4
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	619a      	str	r2, [r3, #24]
	*(Tref->current_PSP)= 0x01000000;  //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ba8:	601a      	str	r2, [r3, #0]

	Tref->current_PSP--;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	1f1a      	subs	r2, r3, #4
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	619a      	str	r2, [r3, #24]
	*(Tref->current_PSP)= (unsigned int )Tref->p_tackEntry; //pc
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	601a      	str	r2, [r3, #0]

	Tref->current_PSP--;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	1f1a      	subs	r2, r3, #4
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	619a      	str	r2, [r3, #24]
	*(Tref->current_PSP)= 0xFFFFFFFD;//LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f06f 0202 	mvn.w	r2, #2
 8000bd0:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e00b      	b.n	8000bf0 <MYRTOS_Create_stackoftask+0x6c>
	{
		Tref->current_PSP-- ;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	1f1a      	subs	r2, r3, #4
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	619a      	str	r2, [r3, #24]
		*(Tref->current_PSP)  = 0 ;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b0c      	cmp	r3, #12
 8000bf4:	ddf0      	ble.n	8000bd8 <MYRTOS_Create_stackoftask+0x54>

	}
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <MYRTOS_Create_Task>:

MYRTOS_error_ID MYRTOS_Create_Task(Task_ref* Tref )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	MYRTOS_error_ID error= noerror;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]


	//Create Its OWN PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MYRTOS_Create_Task+0x74>)
 8000c0e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	609a      	str	r2, [r3, #8]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_size;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60da      	str	r2, [r3, #12]
	//	- _E_PSP_Task	-
	//	-				-
	//	- _eheap		-
	//	-				-
	//
	if(Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MYRTOS_Create_Task+0x78>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d201      	bcs.n	8000c32 <MYRTOS_Create_Task+0x32>
	{
		return Task_exceeded_StackSize ;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e01b      	b.n	8000c6a <MYRTOS_Create_Task+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task -8);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	3b08      	subs	r3, #8
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <MYRTOS_Create_Task+0x74>)
 8000c3a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MYRTOS_Create_stackoftask(Tref);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa0 	bl	8000b84 <MYRTOS_Create_stackoftask>
	//Task State Update -> Suspend
	Tref->Task_State = Suspend;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	//Update schudler table
	OS_Control.OS_Tasks[OS_Control.NO_Active_Task]= Tref;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MYRTOS_Create_Task+0x74>)
 8000c4e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <MYRTOS_Create_Task+0x74>)
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NO_Active_Task++;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MYRTOS_Create_Task+0x74>)
 8000c5c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <MYRTOS_Create_Task+0x74>)
 8000c64:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	return error;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000c4 	.word	0x200000c4
 8000c78:	20000b20 	.word	0x20000b20

08000c7c <bubbleSort>:

void bubbleSort()
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n= OS_Control.NO_Active_Task;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <bubbleSort+0x8c>)
 8000c84:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000c88:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e030      	b.n	8000cf2 <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e023      	b.n	8000cde <bubbleSort+0x62>
			if (OS_Control.OS_Tasks[j]->priority > OS_Control.OS_Tasks[j+1]->priority)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <bubbleSort+0x8c>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	791a      	ldrb	r2, [r3, #4]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4918      	ldr	r1, [pc, #96]	; (8000d08 <bubbleSort+0x8c>)
 8000ca6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d913      	bls.n	8000cd8 <bubbleSort+0x5c>
			{
				temp = OS_Control.OS_Tasks[j] ;
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <bubbleSort+0x8c>)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j]= OS_Control.OS_Tasks[j+1];
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <bubbleSort+0x8c>)
 8000cc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cc4:	4910      	ldr	r1, [pc, #64]	; (8000d08 <bubbleSort+0x8c>)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1] = temp ;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	490d      	ldr	r1, [pc, #52]	; (8000d08 <bubbleSort+0x8c>)
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3d4      	bcc.n	8000c96 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3c9      	bcc.n	8000c90 <bubbleSort+0x14>
			}

}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200000c4 	.word	0x200000c4

08000d0c <MYRTOS_Updata_schad_table>:
void MYRTOS_Updata_schad_table()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
	Task_ref* temp =NULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
	Task_ref* ptask;
	Task_ref* pnexttask;
	int i=0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000d1a:	f7ff ffaf 	bl	8000c7c <bubbleSort>
	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_Queue, &temp)!=FIFO_EMPTY );
 8000d1e:	bf00      	nop
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <MYRTOS_Updata_schad_table+0xc8>)
 8000d26:	f7ff fda7 	bl	8000878 <FIFO_dequeue>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d1f7      	bne.n	8000d20 <MYRTOS_Updata_schad_table+0x14>
	//3- update ready queue
	while(i < OS_Control.NO_Active_Task )
 8000d30:	e044      	b.n	8000dbc <MYRTOS_Updata_schad_table+0xb0>
	{
		ptask =OS_Control.OS_Tasks[i];
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <MYRTOS_Updata_schad_table+0xcc>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	60bb      	str	r3, [r7, #8]
		pnexttask =OS_Control.OS_Tasks[i+1];
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <MYRTOS_Updata_schad_table+0xcc>)
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	607b      	str	r3, [r7, #4]

		if(ptask->Task_State != Suspend)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d031      	beq.n	8000db6 <MYRTOS_Updata_schad_table+0xaa>
		{
			if(pnexttask->Task_State == Suspend)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <MYRTOS_Updata_schad_table+0x62>
			{
				FIFO_enqueue(&Ready_Queue, ptask);
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	481d      	ldr	r0, [pc, #116]	; (8000dd4 <MYRTOS_Updata_schad_table+0xc8>)
 8000d60:	f7ff fd48 	bl	80007f4 <FIFO_enqueue>
				ptask->Task_State =ready;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2203      	movs	r2, #3
 8000d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000d6c:	e02e      	b.n	8000dcc <MYRTOS_Updata_schad_table+0xc0>
			}
			if(ptask->priority < pnexttask->priority)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	791a      	ldrb	r2, [r3, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d208      	bcs.n	8000d8c <MYRTOS_Updata_schad_table+0x80>
			{
				FIFO_enqueue(&Ready_Queue, ptask);
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <MYRTOS_Updata_schad_table+0xc8>)
 8000d7e:	f7ff fd39 	bl	80007f4 <FIFO_enqueue>
				ptask->Task_State =ready;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2203      	movs	r2, #3
 8000d86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000d8a:	e01f      	b.n	8000dcc <MYRTOS_Updata_schad_table+0xc0>
			}
			else if (ptask->priority == pnexttask->priority) {
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	791a      	ldrb	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d108      	bne.n	8000daa <MYRTOS_Updata_schad_table+0x9e>
				FIFO_enqueue(&Ready_Queue, ptask);
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <MYRTOS_Updata_schad_table+0xc8>)
 8000d9c:	f7ff fd2a 	bl	80007f4 <FIFO_enqueue>
				ptask->Task_State =ready;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2203      	movs	r2, #3
 8000da4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000da8:	e005      	b.n	8000db6 <MYRTOS_Updata_schad_table+0xaa>
			}
			else if (ptask->priority > pnexttask->priority)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d809      	bhi.n	8000dca <MYRTOS_Updata_schad_table+0xbe>
				//not allowed to happen as we already reordered it by bubble sort
				break ;
			}
		}

		i++;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
	while(i < OS_Control.NO_Active_Task )
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MYRTOS_Updata_schad_table+0xcc>)
 8000dbe:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8b4      	bhi.n	8000d32 <MYRTOS_Updata_schad_table+0x26>
	}

}
 8000dc8:	e000      	b.n	8000dcc <MYRTOS_Updata_schad_table+0xc0>
				break ;
 8000dca:	bf00      	nop
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000b0 	.word	0x200000b0
 8000dd8:	200000c4 	.word	0x200000c4

08000ddc <decide_whatnext>:

void decide_whatnext()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	if(Ready_Queue.counter ==0 && OS_Control.Curren_Task->Task_State != Suspend)
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <decide_whatnext+0x98>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d11a      	bne.n	8000e1e <decide_whatnext+0x42>
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <decide_whatnext+0x9c>)
 8000dea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d013      	beq.n	8000e1e <decide_whatnext+0x42>
	{
		OS_Control.Curren_Task->Task_State= Running;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <decide_whatnext+0x9c>)
 8000df8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		FIFO_enqueue(&Ready_Queue, OS_Control.Curren_Task);
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <decide_whatnext+0x9c>)
 8000e04:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <decide_whatnext+0x98>)
 8000e0c:	f7ff fcf2 	bl	80007f4 <FIFO_enqueue>
		OS_Control.Next_Task = OS_Control.Curren_Task;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <decide_whatnext+0x9c>)
 8000e12:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <decide_whatnext+0x9c>)
 8000e18:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.Curren_Task);
			OS_Control.Curren_Task->Task_State=ready;
		}
	}

}
 8000e1c:	e027      	b.n	8000e6e <decide_whatnext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.Next_Task);
 8000e1e:	4917      	ldr	r1, [pc, #92]	; (8000e7c <decide_whatnext+0xa0>)
 8000e20:	4814      	ldr	r0, [pc, #80]	; (8000e74 <decide_whatnext+0x98>)
 8000e22:	f7ff fd29 	bl	8000878 <FIFO_dequeue>
		OS_Control.Next_Task->Task_State=Running;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <decide_whatnext+0x9c>)
 8000e28:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if( (OS_Control.Curren_Task->priority == OS_Control.Next_Task->priority)  && (OS_Control.Curren_Task->Task_State != Suspend))
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <decide_whatnext+0x9c>)
 8000e34:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e38:	791a      	ldrb	r2, [r3, #4]
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <decide_whatnext+0x9c>)
 8000e3c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d113      	bne.n	8000e6e <decide_whatnext+0x92>
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <decide_whatnext+0x9c>)
 8000e48:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00c      	beq.n	8000e6e <decide_whatnext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.Curren_Task);
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <decide_whatnext+0x9c>)
 8000e56:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <decide_whatnext+0x98>)
 8000e5e:	f7ff fcc9 	bl	80007f4 <FIFO_enqueue>
			OS_Control.Curren_Task->Task_State=ready;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <decide_whatnext+0x9c>)
 8000e64:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e68:	2203      	movs	r2, #3
 8000e6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000b0 	.word	0x200000b0
 8000e78:	200000c4 	.word	0x200000c4
 8000e7c:	20000268 	.word	0x20000268

08000e80 <OS_SVC_Service>:

void OS_SVC_Service(int * StackFramePointer)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	unsigned char SVC_num;
	SVC_num=    *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	73fb      	strb	r3, [r7, #15]

	switch(SVC_num)
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db1a      	blt.n	8000ed0 <OS_SVC_Service+0x50>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	dd01      	ble.n	8000ea2 <OS_SVC_Service+0x22>
 8000e9e:	2b02      	cmp	r3, #2
		}

		break;
	case TaskWaitingtime:

		break;
 8000ea0:	e016      	b.n	8000ed0 <OS_SVC_Service+0x50>
		MYRTOS_Updata_schad_table();
 8000ea2:	f7ff ff33 	bl	8000d0c <MYRTOS_Updata_schad_table>
		if(OS_Control.OSmodeID == OsRunning)
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <OS_SVC_Service+0x58>)
 8000ea8:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10e      	bne.n	8000ece <OS_SVC_Service+0x4e>
			if(strcmp(OS_Control.Curren_Task ->taskName ,"idleTask"))
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <OS_SVC_Service+0x58>)
 8000eb2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000eb6:	331c      	adds	r3, #28
 8000eb8:	4908      	ldr	r1, [pc, #32]	; (8000edc <OS_SVC_Service+0x5c>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f958 	bl	8000170 <strcmp>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <OS_SVC_Service+0x4e>
				decide_whatnext();
 8000ec6:	f7ff ff89 	bl	8000ddc <decide_whatnext>
				trigger_os_pendsv();
 8000eca:	f7ff fc49 	bl	8000760 <trigger_os_pendsv>
		break;
 8000ece:	bf00      	nop
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000c4 	.word	0x200000c4
 8000edc:	0800117c 	.word	0x0800117c

08000ee0 <MYRTOS_OS_SVC_Set>:



void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d006      	beq.n	8000efe <MYRTOS_OS_SVC_Set+0x1e>
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d006      	beq.n	8000f02 <MYRTOS_OS_SVC_Set+0x22>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d000      	beq.n	8000efa <MYRTOS_OS_SVC_Set+0x1a>
	case TaskWaitingtime:
		__asm("svc 0x02");
		break;
	}

}
 8000ef8:	e005      	b.n	8000f06 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc 0x0");
 8000efa:	df00      	svc	0
		break;
 8000efc:	e003      	b.n	8000f06 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc 0x01");
 8000efe:	df01      	svc	1
		break;
 8000f00:	e001      	b.n	8000f06 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc 0x02");
 8000f02:	df02      	svc	2
		break;
 8000f04:	bf00      	nop
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <MYRTOS_Activate_Task>:

void MYRTOS_Activate_Task(Task_ref* Tref )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	Tref->Task_State=Waiting;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(ActivateTask);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ffdd 	bl	8000ee0 <MYRTOS_OS_SVC_Set>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MYRTOS_StartOS>:
}



void MYRTOS_StartOS()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID=Running;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MYRTOS_StartOS+0x54>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.Curren_Task=&IDLE_TASK;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MYRTOS_StartOS+0x54>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MYRTOS_StartOS+0x58>)
 8000f40:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_Activate_Task(&IDLE_TASK);
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MYRTOS_StartOS+0x58>)
 8000f46:	f7ff ffe3 	bl	8000f10 <MYRTOS_Activate_Task>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000f4a:	f7ff fc17 	bl	800077c <Start_Ticker>

	OS_SET_PSP(OS_Control.Curren_Task->current_PSP);
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MYRTOS_StartOS+0x54>)
 8000f50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f380 8809 	msr	PSP, r0

	//Switch Thread Mode SP from MSP to PSP
	OS_SWITCH_SP_TO_PSP;
 8000f5c:	f3ef 8014 	mrs	r0, CONTROL
 8000f60:	f04f 0102 	mov.w	r1, #2
 8000f64:	ea40 0001 	orr.w	r0, r0, r1
 8000f68:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_ACCESS_TO_UNPRI;
 8000f6c:	f3ef 8314 	mrs	r3, CONTROL
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	f383 8814 	msr	CONTROL, r3
	IDLE_TASK.p_tackEntry();
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <MYRTOS_StartOS+0x58>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4798      	blx	r3


}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000c4 	.word	0x200000c4
 8000f88:	20000274 	.word	0x20000274

08000f8c <task_1>:

Task_ref task1 ,task2,task3;
unsigned char task1led,task2led,task3led;

void task_1()
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	while(1)
	{
		task1led ^=1;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <task_1+0x14>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b01      	ldr	r3, [pc, #4]	; (8000fa0 <task_1+0x14>)
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e7f7      	b.n	8000f90 <task_1+0x4>
 8000fa0:	20000448 	.word	0x20000448

08000fa4 <task_2>:
	}
}

void task_2()
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	while(1)
	{
		task2led ^=1;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <task_2+0x14>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <task_2+0x14>)
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e7f7      	b.n	8000fa8 <task_2+0x4>
 8000fb8:	20000449 	.word	0x20000449

08000fbc <task_3>:

	}
}

void task_3()
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	while(1)
	{
		task3led ^=1;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <task_3+0x14>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b01      	ldr	r3, [pc, #4]	; (8000fd0 <task_3+0x14>)
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e7f7      	b.n	8000fc0 <task_3+0x4>
 8000fd0:	200004d4 	.word	0x200004d4

08000fd4 <main>:

	}
}
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	MYRTOS_error_ID error;
	//HW int (clock tree, reset controller)
	hw_init();
 8000fda:	f7ff fbb7 	bl	800074c <hw_init>
	if(MYRTOS_init() != noerror)
 8000fde:	f7ff fd91 	bl	8000b04 <MYRTOS_init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d000      	beq.n	8000fea <main+0x16>
		while(1);
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x14>

	task1.Stack_size=1024;
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <main+0xc4>)
 8000fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff0:	601a      	str	r2, [r3, #0]
	task1.p_tackEntry=task_1;
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <main+0xc4>)
 8000ff4:	4a29      	ldr	r2, [pc, #164]	; (800109c <main+0xc8>)
 8000ff6:	611a      	str	r2, [r3, #16]
	task1.priority=3;
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <main+0xc4>)
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	711a      	strb	r2, [r3, #4]
	strcpy(task1.taskName,"task1");
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <main+0xcc>)
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <main+0xd0>)
 8001002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001006:	6018      	str	r0, [r3, #0]
 8001008:	3304      	adds	r3, #4
 800100a:	8019      	strh	r1, [r3, #0]

	task2.Stack_size=1024;
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <main+0xd4>)
 800100e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001012:	601a      	str	r2, [r3, #0]
	task2.p_tackEntry=task_2;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <main+0xd4>)
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <main+0xd8>)
 8001018:	611a      	str	r2, [r3, #16]
	task2.priority=3;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <main+0xd4>)
 800101c:	2203      	movs	r2, #3
 800101e:	711a      	strb	r2, [r3, #4]
	strcpy(task2.taskName,"task2");
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <main+0xdc>)
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <main+0xe0>)
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	6018      	str	r0, [r3, #0]
 800102a:	3304      	adds	r3, #4
 800102c:	8019      	strh	r1, [r3, #0]

	task3.Stack_size=1024;
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <main+0xe4>)
 8001030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001034:	601a      	str	r2, [r3, #0]
	task3.p_tackEntry=task_3;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <main+0xe4>)
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <main+0xe8>)
 800103a:	611a      	str	r2, [r3, #16]
	task3.priority=3;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <main+0xe4>)
 800103e:	2203      	movs	r2, #3
 8001040:	711a      	strb	r2, [r3, #4]
	strcpy(task3.taskName,"task3");
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <main+0xec>)
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <main+0xf0>)
 8001046:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104a:	6018      	str	r0, [r3, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	8019      	strh	r1, [r3, #0]


	error += MYRTOS_Create_Task(&task1);
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <main+0xc4>)
 8001052:	f7ff fdd5 	bl	8000c00 <MYRTOS_Create_Task>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4413      	add	r3, r2
 800105e:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_Create_Task(&task2);
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <main+0xd4>)
 8001062:	f7ff fdcd 	bl	8000c00 <MYRTOS_Create_Task>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4413      	add	r3, r2
 800106e:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_Create_Task(&task3);
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <main+0xe4>)
 8001072:	f7ff fdc5 	bl	8000c00 <MYRTOS_Create_Task>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4413      	add	r3, r2
 800107e:	71fb      	strb	r3, [r7, #7]

	MYRTOS_Activate_Task(&task1);
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <main+0xc4>)
 8001082:	f7ff ff45 	bl	8000f10 <MYRTOS_Activate_Task>
	MYRTOS_Activate_Task(&task2);
 8001086:	4808      	ldr	r0, [pc, #32]	; (80010a8 <main+0xd4>)
 8001088:	f7ff ff42 	bl	8000f10 <MYRTOS_Activate_Task>
	MYRTOS_Activate_Task(&task3);
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <main+0xe4>)
 800108e:	f7ff ff3f 	bl	8000f10 <MYRTOS_Activate_Task>

	MYRTOS_StartOS();
 8001092:	f7ff ff4d 	bl	8000f30 <MYRTOS_StartOS>

	while (1)
 8001096:	e7fe      	b.n	8001096 <main+0xc2>
 8001098:	2000044c 	.word	0x2000044c
 800109c:	08000f8d 	.word	0x08000f8d
 80010a0:	20000468 	.word	0x20000468
 80010a4:	08001188 	.word	0x08001188
 80010a8:	20000490 	.word	0x20000490
 80010ac:	08000fa5 	.word	0x08000fa5
 80010b0:	200004ac 	.word	0x200004ac
 80010b4:	08001190 	.word	0x08001190
 80010b8:	200004d8 	.word	0x200004d8
 80010bc:	08000fbd 	.word	0x08000fbd
 80010c0:	200004f4 	.word	0x200004f4
 80010c4:	08001198 	.word	0x08001198

080010c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f6:	f000 f811 	bl	800111c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff ff6b 	bl	8000fd4 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   r0, =_estack
 8001100:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800110c:	080011a8 	.word	0x080011a8
  ldr r2, =_sbss
 8001110:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001114:	2000051c 	.word	0x2000051c

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <__libc_init_array>:
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	2500      	movs	r5, #0
 8001120:	4e0c      	ldr	r6, [pc, #48]	; (8001154 <__libc_init_array+0x38>)
 8001122:	4c0d      	ldr	r4, [pc, #52]	; (8001158 <__libc_init_array+0x3c>)
 8001124:	1ba4      	subs	r4, r4, r6
 8001126:	10a4      	asrs	r4, r4, #2
 8001128:	42a5      	cmp	r5, r4
 800112a:	d109      	bne.n	8001140 <__libc_init_array+0x24>
 800112c:	f000 f81a 	bl	8001164 <_init>
 8001130:	2500      	movs	r5, #0
 8001132:	4e0a      	ldr	r6, [pc, #40]	; (800115c <__libc_init_array+0x40>)
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <__libc_init_array+0x44>)
 8001136:	1ba4      	subs	r4, r4, r6
 8001138:	10a4      	asrs	r4, r4, #2
 800113a:	42a5      	cmp	r5, r4
 800113c:	d105      	bne.n	800114a <__libc_init_array+0x2e>
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001144:	4798      	blx	r3
 8001146:	3501      	adds	r5, #1
 8001148:	e7ee      	b.n	8001128 <__libc_init_array+0xc>
 800114a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800114e:	4798      	blx	r3
 8001150:	3501      	adds	r5, #1
 8001152:	e7f2      	b.n	800113a <__libc_init_array+0x1e>
 8001154:	080011a0 	.word	0x080011a0
 8001158:	080011a0 	.word	0x080011a0
 800115c:	080011a0 	.word	0x080011a0
 8001160:	080011a4 	.word	0x080011a4

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
