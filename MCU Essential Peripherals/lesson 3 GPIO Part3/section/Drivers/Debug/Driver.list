
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000db4  08000db4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de4  08000de4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000de4  08000de4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de4  08000de4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000e0c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000e0c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030a6  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007f9  00000000  00000000  000230ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000720  00000000  00000000  000238e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000148  00000000  00000000  00024008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00024150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f84  00000000  00000000  00024250  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a97  00000000  00000000  000261d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007af1  00000000  00000000  00027c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f75c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003c8  00000000  00000000  0002f7d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d9c 	.word	0x08000d9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000d9c 	.word	0x08000d9c

08000170 <clock_init>:
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_EN() ;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t pin_con;

	//PA1 OUTPT PUSH PULL
	//SPEED 10M
	pin_con.GPIO_PinNumber=GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	482d      	ldr	r0, [pc, #180]	; (8000268 <GPIO_init+0xd0>)
 80001b2:	f000 fd10 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4827      	ldr	r0, [pc, #156]	; (8000268 <GPIO_init+0xd0>)
 80001ca:	f000 fd04 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	4821      	ldr	r0, [pc, #132]	; (8000268 <GPIO_init+0xd0>)
 80001e2:	f000 fcf8 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	481b      	ldr	r0, [pc, #108]	; (8000268 <GPIO_init+0xd0>)
 80001fa:	f000 fcec 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	4815      	ldr	r0, [pc, #84]	; (8000268 <GPIO_init+0xd0>)
 8000212:	f000 fce0 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	480f      	ldr	r0, [pc, #60]	; (8000268 <GPIO_init+0xd0>)
 800022a:	f000 fcd4 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_14;
 800022e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000232:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <GPIO_init+0xd0>)
 8000242:	f000 fcc8 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_15;
 8000246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800024a:	80bb      	strh	r3, [r7, #4]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800024c:	2304      	movs	r3, #4
 800024e:	71bb      	strb	r3, [r7, #6]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000250:	2301      	movs	r3, #1
 8000252:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_con);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4619      	mov	r1, r3
 8000258:	4803      	ldr	r0, [pc, #12]	; (8000268 <GPIO_init+0xd0>)
 800025a:	f000 fcbc 	bl	8000bd6 <MCAL_GPIO_Init>
}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00

0800026c <wait1>:

void wait1(uint32_t time)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e00b      	b.n	8000292 <wait1+0x26>
		for (j = 0; j < 255; j++);
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	e002      	b.n	8000286 <wait1+0x1a>
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	3301      	adds	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	2bfe      	cmp	r3, #254	; 0xfe
 800028a:	d9f9      	bls.n	8000280 <wait1+0x14>
	for (i = 0; i < time; i++)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	429a      	cmp	r2, r3
 8000298:	d3ef      	bcc.n	800027a <wait1+0xe>
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <main>:


int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
	unsigned char key_pressed;
	unsigned char lcd   [10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 80002aa:	4a2d      	ldr	r2, [pc, #180]	; (8000360 <main+0xbc>)
 80002ac:	f107 030c 	add.w	r3, r7, #12
 80002b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b2:	c303      	stmia	r3!, {r0, r1}
 80002b4:	801a      	strh	r2, [r3, #0]
	unsigned char seg_7 [10] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};
 80002b6:	4a2b      	ldr	r2, [pc, #172]	; (8000364 <main+0xc0>)
 80002b8:	463b      	mov	r3, r7
 80002ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80002bc:	c303      	stmia	r3!, {r0, r1}
 80002be:	801a      	strh	r2, [r3, #0]

	clock_init();
 80002c0:	f7ff ff56 	bl	8000170 <clock_init>
	GPIO_init();
 80002c4:	f7ff ff68 	bl	8000198 <GPIO_init>
	LCD_INIT();
 80002c8:	f000 fa1c 	bl	8000704 <LCD_INIT>
	LCD_WRITE_STRING("lcd hh");
 80002cc:	4826      	ldr	r0, [pc, #152]	; (8000368 <main+0xc4>)
 80002ce:	f000 fbf3 	bl	8000ab8 <LCD_WRITE_STRING>
	wait1(30);
 80002d2:	201e      	movs	r0, #30
 80002d4:	f7ff ffca 	bl	800026c <wait1>
	LCD_clear_screen();
 80002d8:	f000 f9d2 	bl	8000680 <LCD_clear_screen>

	for (unsigned char i = 0; i < 10; i++) {
 80002dc:	2300      	movs	r3, #0
 80002de:	75fb      	strb	r3, [r7, #23]
 80002e0:	e01b      	b.n	800031a <main+0x76>
		LCD_WRITE_CHAR(lcd[i]);
 80002e2:	7dfb      	ldrb	r3, [r7, #23]
 80002e4:	f107 0218 	add.w	r2, r7, #24
 80002e8:	4413      	add	r3, r2
 80002ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fbc0 	bl	8000a74 <LCD_WRITE_CHAR>
		MCAL_GPIO_Write_port(GPIOB, seg_7[i] << 9); /* write data on to the LED port */
 80002f4:	7dfb      	ldrb	r3, [r7, #23]
 80002f6:	f107 0218 	add.w	r2, r7, #24
 80002fa:	4413      	add	r3, r2
 80002fc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000300:	b29b      	uxth	r3, r3
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	b29b      	uxth	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	4818      	ldr	r0, [pc, #96]	; (800036c <main+0xc8>)
 800030a:	f000 fd15 	bl	8000d38 <MCAL_GPIO_Write_port>
		wait1(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f7ff ffac 	bl	800026c <wait1>
	for (unsigned char i = 0; i < 10; i++) {
 8000314:	7dfb      	ldrb	r3, [r7, #23]
 8000316:	3301      	adds	r3, #1
 8000318:	75fb      	strb	r3, [r7, #23]
 800031a:	7dfb      	ldrb	r3, [r7, #23]
 800031c:	2b09      	cmp	r3, #9
 800031e:	d9e0      	bls.n	80002e2 <main+0x3e>
		/* wait for 1 second */
	}

	LCD_clear_screen();
 8000320:	f000 f9ae 	bl	8000680 <LCD_clear_screen>
	Keypad_init();
 8000324:	f000 f850 	bl	80003c8 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000328:	4811      	ldr	r0, [pc, #68]	; (8000370 <main+0xcc>)
 800032a:	f000 fbc5 	bl	8000ab8 <LCD_WRITE_STRING>
	wait1(30);
 800032e:	201e      	movs	r0, #30
 8000330:	f7ff ff9c 	bl	800026c <wait1>
	LCD_clear_screen();
 8000334:	f000 f9a4 	bl	8000680 <LCD_clear_screen>

	while(1)
	{
		key_pressed = Keypad_getkey();
 8000338:	f000 f8bc 	bl	80004b4 <Keypad_getkey>
 800033c:	4603      	mov	r3, r0
 800033e:	75bb      	strb	r3, [r7, #22]
		switch (key_pressed) {
 8000340:	7dbb      	ldrb	r3, [r7, #22]
 8000342:	2b3f      	cmp	r3, #63	; 0x3f
 8000344:	d002      	beq.n	800034c <main+0xa8>
 8000346:	2b41      	cmp	r3, #65	; 0x41
 8000348:	d008      	beq.n	800035c <main+0xb8>
 800034a:	e002      	b.n	8000352 <main+0xae>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 800034c:	f000 f998 	bl	8000680 <LCD_clear_screen>
			break;
 8000350:	e005      	b.n	800035e <main+0xba>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000352:	7dbb      	ldrb	r3, [r7, #22]
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fb8d 	bl	8000a74 <LCD_WRITE_CHAR>
			break;
 800035a:	e000      	b.n	800035e <main+0xba>
			break;
 800035c:	bf00      	nop
		key_pressed = Keypad_getkey();
 800035e:	e7eb      	b.n	8000338 <main+0x94>
 8000360:	08000dcc 	.word	0x08000dcc
 8000364:	08000dd8 	.word	0x08000dd8
 8000368:	08000db4 	.word	0x08000db4
 800036c:	40010c00 	.word	0x40010c00
 8000370:	08000dbc 	.word	0x08000dbc

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 fcd7 	bl	8000d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff7d 	bl	80002a4 <main>

080003aa <LoopForever>:

LoopForever:
    b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003b8:	08000dec 	.word	0x08000dec
  ldr r2, =_sbss
 80003bc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003c0:	20000040 	.word	0x20000040

080003c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC1_2_IRQHandler>
	...

080003c8 <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
	pin_con.GPIO_PinNumber=R0;
 80003cc:	4b37      	ldr	r3, [pc, #220]	; (80004ac <Keypad_init+0xe4>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003d2:	4b36      	ldr	r3, [pc, #216]	; (80004ac <Keypad_init+0xe4>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80003d8:	4b34      	ldr	r3, [pc, #208]	; (80004ac <Keypad_init+0xe4>)
 80003da:	2201      	movs	r2, #1
 80003dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 80003de:	4933      	ldr	r1, [pc, #204]	; (80004ac <Keypad_init+0xe4>)
 80003e0:	4833      	ldr	r0, [pc, #204]	; (80004b0 <Keypad_init+0xe8>)
 80003e2:	f000 fbf8 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=R1;
 80003e6:	4b31      	ldr	r3, [pc, #196]	; (80004ac <Keypad_init+0xe4>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	; (80004ac <Keypad_init+0xe4>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <Keypad_init+0xe4>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 80003f8:	492c      	ldr	r1, [pc, #176]	; (80004ac <Keypad_init+0xe4>)
 80003fa:	482d      	ldr	r0, [pc, #180]	; (80004b0 <Keypad_init+0xe8>)
 80003fc:	f000 fbeb 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=R2;
 8000400:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <Keypad_init+0xe4>)
 8000402:	2208      	movs	r2, #8
 8000404:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000406:	4b29      	ldr	r3, [pc, #164]	; (80004ac <Keypad_init+0xe4>)
 8000408:	2204      	movs	r2, #4
 800040a:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <Keypad_init+0xe4>)
 800040e:	2201      	movs	r2, #1
 8000410:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 8000412:	4926      	ldr	r1, [pc, #152]	; (80004ac <Keypad_init+0xe4>)
 8000414:	4826      	ldr	r0, [pc, #152]	; (80004b0 <Keypad_init+0xe8>)
 8000416:	f000 fbde 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=R3;
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <Keypad_init+0xe4>)
 800041c:	2210      	movs	r2, #16
 800041e:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <Keypad_init+0xe4>)
 8000422:	2204      	movs	r2, #4
 8000424:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000426:	4b21      	ldr	r3, [pc, #132]	; (80004ac <Keypad_init+0xe4>)
 8000428:	2201      	movs	r2, #1
 800042a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 800042c:	491f      	ldr	r1, [pc, #124]	; (80004ac <Keypad_init+0xe4>)
 800042e:	4820      	ldr	r0, [pc, #128]	; (80004b0 <Keypad_init+0xe8>)
 8000430:	f000 fbd1 	bl	8000bd6 <MCAL_GPIO_Init>

//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));

	pin_con.GPIO_PinNumber=C0;
 8000434:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <Keypad_init+0xe4>)
 8000436:	2220      	movs	r2, #32
 8000438:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <Keypad_init+0xe4>)
 800043c:	2204      	movs	r2, #4
 800043e:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000440:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <Keypad_init+0xe4>)
 8000442:	2201      	movs	r2, #1
 8000444:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 8000446:	4919      	ldr	r1, [pc, #100]	; (80004ac <Keypad_init+0xe4>)
 8000448:	4819      	ldr	r0, [pc, #100]	; (80004b0 <Keypad_init+0xe8>)
 800044a:	f000 fbc4 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=C1;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <Keypad_init+0xe4>)
 8000450:	2240      	movs	r2, #64	; 0x40
 8000452:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <Keypad_init+0xe4>)
 8000456:	2204      	movs	r2, #4
 8000458:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <Keypad_init+0xe4>)
 800045c:	2201      	movs	r2, #1
 800045e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 8000460:	4912      	ldr	r1, [pc, #72]	; (80004ac <Keypad_init+0xe4>)
 8000462:	4813      	ldr	r0, [pc, #76]	; (80004b0 <Keypad_init+0xe8>)
 8000464:	f000 fbb7 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=C2;
 8000468:	4b10      	ldr	r3, [pc, #64]	; (80004ac <Keypad_init+0xe4>)
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <Keypad_init+0xe4>)
 8000470:	2204      	movs	r2, #4
 8000472:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <Keypad_init+0xe4>)
 8000476:	2201      	movs	r2, #1
 8000478:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 800047a:	490c      	ldr	r1, [pc, #48]	; (80004ac <Keypad_init+0xe4>)
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <Keypad_init+0xe8>)
 800047e:	f000 fbaa 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=C3;
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <Keypad_init+0xe4>)
 8000484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000488:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <Keypad_init+0xe4>)
 800048c:	2204      	movs	r2, #4
 800048e:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <Keypad_init+0xe4>)
 8000492:	2201      	movs	r2, #1
 8000494:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pin_con);
 8000496:	4905      	ldr	r1, [pc, #20]	; (80004ac <Keypad_init+0xe4>)
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <Keypad_init+0xe8>)
 800049a:	f000 fb9c 	bl	8000bd6 <MCAL_GPIO_Init>

//	KEYPAD_PORT = 0xFF;
	MCAL_GPIO_Write_port(KEYPAD_PORT, 0xFF);
 800049e:	21ff      	movs	r1, #255	; 0xff
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <Keypad_init+0xe8>)
 80004a2:	f000 fc49 	bl	8000d38 <MCAL_GPIO_Write_port>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000003c 	.word	0x2000003c
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <Keypad_getkey>:

char Keypad_getkey(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e0b4      	b.n	800062a <Keypad_getkey+0x176>
//		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
//		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		MCAL_GPIO_Write_pin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80004c0:	4b5e      	ldr	r3, [pc, #376]	; (800063c <Keypad_getkey+0x188>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	485d      	ldr	r0, [pc, #372]	; (8000640 <Keypad_getkey+0x18c>)
 80004cc:	f000 fc1d 	bl	8000d0a <MCAL_GPIO_Write_pin>
		MCAL_GPIO_Write_pin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80004d0:	4b5a      	ldr	r3, [pc, #360]	; (800063c <Keypad_getkey+0x188>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	4859      	ldr	r0, [pc, #356]	; (8000640 <Keypad_getkey+0x18c>)
 80004dc:	f000 fc15 	bl	8000d0a <MCAL_GPIO_Write_pin>
		MCAL_GPIO_Write_pin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80004e0:	4b56      	ldr	r3, [pc, #344]	; (800063c <Keypad_getkey+0x188>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	4855      	ldr	r0, [pc, #340]	; (8000640 <Keypad_getkey+0x18c>)
 80004ec:	f000 fc0d 	bl	8000d0a <MCAL_GPIO_Write_pin>
		MCAL_GPIO_Write_pin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 80004f0:	4b52      	ldr	r3, [pc, #328]	; (800063c <Keypad_getkey+0x188>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	2201      	movs	r2, #1
 80004f8:	4619      	mov	r1, r3
 80004fa:	4851      	ldr	r0, [pc, #324]	; (8000640 <Keypad_getkey+0x18c>)
 80004fc:	f000 fc05 	bl	8000d0a <MCAL_GPIO_Write_pin>

		MCAL_GPIO_Write_pin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000500:	4a4e      	ldr	r2, [pc, #312]	; (800063c <Keypad_getkey+0x188>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000508:	b29b      	uxth	r3, r3
 800050a:	2200      	movs	r2, #0
 800050c:	4619      	mov	r1, r3
 800050e:	484c      	ldr	r0, [pc, #304]	; (8000640 <Keypad_getkey+0x18c>)
 8000510:	f000 fbfb 	bl	8000d0a <MCAL_GPIO_Write_pin>

		for(j = 0; j < 4; j++)
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	e080      	b.n	800061c <Keypad_getkey+0x168>
		{
			if (MCAL_GPIO_Read_pin(KEYPAD_PORT, Key_padRow[j]) == 0)
 800051a:	4a4a      	ldr	r2, [pc, #296]	; (8000644 <Keypad_getkey+0x190>)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000522:	b29b      	uxth	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	4846      	ldr	r0, [pc, #280]	; (8000640 <Keypad_getkey+0x18c>)
 8000528:	f000 fbd8 	bl	8000cdc <MCAL_GPIO_Read_pin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d171      	bne.n	8000616 <Keypad_getkey+0x162>
			{
				while(MCAL_GPIO_Read_pin(KEYPAD_PORT, Key_padRow[j]) == 0);
 8000532:	bf00      	nop
 8000534:	4a43      	ldr	r2, [pc, #268]	; (8000644 <Keypad_getkey+0x190>)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	483f      	ldr	r0, [pc, #252]	; (8000640 <Keypad_getkey+0x18c>)
 8000542:	f000 fbcb 	bl	8000cdc <MCAL_GPIO_Read_pin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f3      	beq.n	8000534 <Keypad_getkey+0x80>
				switch(i){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d861      	bhi.n	8000616 <Keypad_getkey+0x162>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <Keypad_getkey+0xa4>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	08000569 	.word	0x08000569
 800055c:	08000591 	.word	0x08000591
 8000560:	080005b9 	.word	0x080005b9
 8000564:	080005e1 	.word	0x080005e1
					case (0):
						if(j == 0) return '7';
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d101      	bne.n	8000572 <Keypad_getkey+0xbe>
 800056e:	2337      	movs	r3, #55	; 0x37
 8000570:	e060      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 1) return '4';
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d101      	bne.n	800057c <Keypad_getkey+0xc8>
 8000578:	2334      	movs	r3, #52	; 0x34
 800057a:	e05b      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 2) return '1';
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d101      	bne.n	8000586 <Keypad_getkey+0xd2>
 8000582:	2331      	movs	r3, #49	; 0x31
 8000584:	e056      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 3) return '?';
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d13d      	bne.n	8000608 <Keypad_getkey+0x154>
 800058c:	233f      	movs	r3, #63	; 0x3f
 800058e:	e051      	b.n	8000634 <Keypad_getkey+0x180>
						break;
					case (1):
						if(j == 0) return '8';
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <Keypad_getkey+0xe6>
 8000596:	2338      	movs	r3, #56	; 0x38
 8000598:	e04c      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 1) return '5';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d101      	bne.n	80005a4 <Keypad_getkey+0xf0>
 80005a0:	2335      	movs	r3, #53	; 0x35
 80005a2:	e047      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 2) return '2';
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d101      	bne.n	80005ae <Keypad_getkey+0xfa>
 80005aa:	2332      	movs	r3, #50	; 0x32
 80005ac:	e042      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 3) return '0';
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d12b      	bne.n	800060c <Keypad_getkey+0x158>
 80005b4:	2330      	movs	r3, #48	; 0x30
 80005b6:	e03d      	b.n	8000634 <Keypad_getkey+0x180>
						break;
					case (2):
						if(j == 0) return '9';
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <Keypad_getkey+0x10e>
 80005be:	2339      	movs	r3, #57	; 0x39
 80005c0:	e038      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 1) return '6';
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d101      	bne.n	80005cc <Keypad_getkey+0x118>
 80005c8:	2336      	movs	r3, #54	; 0x36
 80005ca:	e033      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 2) return '3';
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d101      	bne.n	80005d6 <Keypad_getkey+0x122>
 80005d2:	2333      	movs	r3, #51	; 0x33
 80005d4:	e02e      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 3) return '=';
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d119      	bne.n	8000610 <Keypad_getkey+0x15c>
 80005dc:	233d      	movs	r3, #61	; 0x3d
 80005de:	e029      	b.n	8000634 <Keypad_getkey+0x180>
						break;
					case (3):
						if(j == 0) return '/';
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <Keypad_getkey+0x136>
 80005e6:	232f      	movs	r3, #47	; 0x2f
 80005e8:	e024      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 1) return '*';
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d101      	bne.n	80005f4 <Keypad_getkey+0x140>
 80005f0:	232a      	movs	r3, #42	; 0x2a
 80005f2:	e01f      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 2) return '-';
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d101      	bne.n	80005fe <Keypad_getkey+0x14a>
 80005fa:	232d      	movs	r3, #45	; 0x2d
 80005fc:	e01a      	b.n	8000634 <Keypad_getkey+0x180>
						else if (j == 3) return '+';
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d107      	bne.n	8000614 <Keypad_getkey+0x160>
 8000604:	232b      	movs	r3, #43	; 0x2b
 8000606:	e015      	b.n	8000634 <Keypad_getkey+0x180>
						break;
 8000608:	bf00      	nop
 800060a:	e004      	b.n	8000616 <Keypad_getkey+0x162>
						break;
 800060c:	bf00      	nop
 800060e:	e002      	b.n	8000616 <Keypad_getkey+0x162>
						break;
 8000610:	bf00      	nop
 8000612:	e000      	b.n	8000616 <Keypad_getkey+0x162>
						break;
 8000614:	bf00      	nop
		for(j = 0; j < 4; j++)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b03      	cmp	r3, #3
 8000620:	f77f af7b 	ble.w	800051a <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b03      	cmp	r3, #3
 800062e:	f77f af47 	ble.w	80004c0 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 8000632:	2341      	movs	r3, #65	; 0x41
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000010 	.word	0x20000010
 8000640:	40010c00 	.word	0x40010c00
 8000644:	20000000 	.word	0x20000000

08000648 <wait>:

#include "lcd.h"


void wait(uint32_t time)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e00b      	b.n	800066e <wait+0x26>
		for (j = 0; j < 255; j++);
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	e002      	b.n	8000662 <wait+0x1a>
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3301      	adds	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2bfe      	cmp	r3, #254	; 0xfe
 8000666:	d9f9      	bls.n	800065c <wait+0x14>
	for (i = 0; i < time; i++)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3301      	adds	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3ef      	bcc.n	8000656 <wait+0xe>
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <LCD_clear_screen>:

void LCD_clear_screen(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000684:	2001      	movs	r0, #1
 8000686:	f000 f9d1 	bl	8000a2c <LCD_WRITE_COMMAND>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	MCAL_GPIO_Write_pin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <LCD_lcd_kick+0x28>)
 800069c:	f000 fb35 	bl	8000d0a <MCAL_GPIO_Write_pin>
//	LCD_CTRL |= (1 << EN_SWITCH);
	wait(50);
 80006a0:	2032      	movs	r0, #50	; 0x32
 80006a2:	f7ff ffd1 	bl	8000648 <wait>
	MCAL_GPIO_Write_pin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <LCD_lcd_kick+0x28>)
 80006ae:	f000 fb2c 	bl	8000d0a <MCAL_GPIO_Write_pin>
//	LCD_CTRL &= ~(1 << EN_SWITCH);
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40010800 	.word	0x40010800

080006bc <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d108      	bne.n	80006e4 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d805      	bhi.n	80006e4 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	3b80      	subs	r3, #128	; 0x80
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f9a4 	bl	8000a2c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d108      	bne.n	80006fc <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d805      	bhi.n	80006fc <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	3b40      	subs	r3, #64	; 0x40
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f998 	bl	8000a2c <LCD_WRITE_COMMAND>
		}
	}
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <LCD_INIT>:

void LCD_INIT(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	wait(20);
 8000708:	2014      	movs	r0, #20
 800070a:	f7ff ff9d 	bl	8000648 <wait>
	pin_con.GPIO_PinNumber=RS_SWITCH;
 800070e:	4b5b      	ldr	r3, [pc, #364]	; (800087c <LCD_INIT+0x178>)
 8000710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000714:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000716:	4b59      	ldr	r3, [pc, #356]	; (800087c <LCD_INIT+0x178>)
 8000718:	2204      	movs	r2, #4
 800071a:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800071c:	4b57      	ldr	r3, [pc, #348]	; (800087c <LCD_INIT+0x178>)
 800071e:	2201      	movs	r2, #1
 8000720:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000722:	4956      	ldr	r1, [pc, #344]	; (800087c <LCD_INIT+0x178>)
 8000724:	4856      	ldr	r0, [pc, #344]	; (8000880 <LCD_INIT+0x17c>)
 8000726:	f000 fa56 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=RW_SWITCH;
 800072a:	4b54      	ldr	r3, [pc, #336]	; (800087c <LCD_INIT+0x178>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000732:	4b52      	ldr	r3, [pc, #328]	; (800087c <LCD_INIT+0x178>)
 8000734:	2204      	movs	r2, #4
 8000736:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000738:	4b50      	ldr	r3, [pc, #320]	; (800087c <LCD_INIT+0x178>)
 800073a:	2201      	movs	r2, #1
 800073c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 800073e:	494f      	ldr	r1, [pc, #316]	; (800087c <LCD_INIT+0x178>)
 8000740:	484f      	ldr	r0, [pc, #316]	; (8000880 <LCD_INIT+0x17c>)
 8000742:	f000 fa48 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=EN_SWITCH;
 8000746:	4b4d      	ldr	r3, [pc, #308]	; (800087c <LCD_INIT+0x178>)
 8000748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800074c:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800074e:	4b4b      	ldr	r3, [pc, #300]	; (800087c <LCD_INIT+0x178>)
 8000750:	2204      	movs	r2, #4
 8000752:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000754:	4b49      	ldr	r3, [pc, #292]	; (800087c <LCD_INIT+0x178>)
 8000756:	2201      	movs	r2, #1
 8000758:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 800075a:	4948      	ldr	r1, [pc, #288]	; (800087c <LCD_INIT+0x178>)
 800075c:	4848      	ldr	r0, [pc, #288]	; (8000880 <LCD_INIT+0x17c>)
 800075e:	f000 fa3a 	bl	8000bd6 <MCAL_GPIO_Init>
	//===============================

	pin_con.GPIO_PinNumber=GPIO_PIN_0;
 8000762:	4b46      	ldr	r3, [pc, #280]	; (800087c <LCD_INIT+0x178>)
 8000764:	2201      	movs	r2, #1
 8000766:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000768:	4b44      	ldr	r3, [pc, #272]	; (800087c <LCD_INIT+0x178>)
 800076a:	2204      	movs	r2, #4
 800076c:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800076e:	4b43      	ldr	r3, [pc, #268]	; (800087c <LCD_INIT+0x178>)
 8000770:	2201      	movs	r2, #1
 8000772:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000774:	4941      	ldr	r1, [pc, #260]	; (800087c <LCD_INIT+0x178>)
 8000776:	4842      	ldr	r0, [pc, #264]	; (8000880 <LCD_INIT+0x17c>)
 8000778:	f000 fa2d 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_1;
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <LCD_INIT+0x178>)
 800077e:	2202      	movs	r2, #2
 8000780:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <LCD_INIT+0x178>)
 8000784:	2204      	movs	r2, #4
 8000786:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000788:	4b3c      	ldr	r3, [pc, #240]	; (800087c <LCD_INIT+0x178>)
 800078a:	2201      	movs	r2, #1
 800078c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 800078e:	493b      	ldr	r1, [pc, #236]	; (800087c <LCD_INIT+0x178>)
 8000790:	483b      	ldr	r0, [pc, #236]	; (8000880 <LCD_INIT+0x17c>)
 8000792:	f000 fa20 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_2;
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <LCD_INIT+0x178>)
 8000798:	2204      	movs	r2, #4
 800079a:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <LCD_INIT+0x178>)
 800079e:	2204      	movs	r2, #4
 80007a0:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <LCD_INIT+0x178>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80007a8:	4934      	ldr	r1, [pc, #208]	; (800087c <LCD_INIT+0x178>)
 80007aa:	4835      	ldr	r0, [pc, #212]	; (8000880 <LCD_INIT+0x17c>)
 80007ac:	f000 fa13 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_3;
 80007b0:	4b32      	ldr	r3, [pc, #200]	; (800087c <LCD_INIT+0x178>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80007b6:	4b31      	ldr	r3, [pc, #196]	; (800087c <LCD_INIT+0x178>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <LCD_INIT+0x178>)
 80007be:	2201      	movs	r2, #1
 80007c0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80007c2:	492e      	ldr	r1, [pc, #184]	; (800087c <LCD_INIT+0x178>)
 80007c4:	482e      	ldr	r0, [pc, #184]	; (8000880 <LCD_INIT+0x17c>)
 80007c6:	f000 fa06 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_4;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <LCD_INIT+0x178>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <LCD_INIT+0x178>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <LCD_INIT+0x178>)
 80007d8:	2201      	movs	r2, #1
 80007da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80007dc:	4927      	ldr	r1, [pc, #156]	; (800087c <LCD_INIT+0x178>)
 80007de:	4828      	ldr	r0, [pc, #160]	; (8000880 <LCD_INIT+0x17c>)
 80007e0:	f000 f9f9 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_5;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <LCD_INIT+0x178>)
 80007e6:	2220      	movs	r2, #32
 80007e8:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <LCD_INIT+0x178>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <LCD_INIT+0x178>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80007f6:	4921      	ldr	r1, [pc, #132]	; (800087c <LCD_INIT+0x178>)
 80007f8:	4821      	ldr	r0, [pc, #132]	; (8000880 <LCD_INIT+0x17c>)
 80007fa:	f000 f9ec 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_6;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <LCD_INIT+0x178>)
 8000800:	2240      	movs	r2, #64	; 0x40
 8000802:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <LCD_INIT+0x178>)
 8000806:	2204      	movs	r2, #4
 8000808:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <LCD_INIT+0x178>)
 800080c:	2201      	movs	r2, #1
 800080e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000810:	491a      	ldr	r1, [pc, #104]	; (800087c <LCD_INIT+0x178>)
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <LCD_INIT+0x17c>)
 8000814:	f000 f9df 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_7;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <LCD_INIT+0x178>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <LCD_INIT+0x178>)
 8000820:	2204      	movs	r2, #4
 8000822:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <LCD_INIT+0x178>)
 8000826:	2201      	movs	r2, #1
 8000828:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 800082a:	4914      	ldr	r1, [pc, #80]	; (800087c <LCD_INIT+0x178>)
 800082c:	4814      	ldr	r0, [pc, #80]	; (8000880 <LCD_INIT+0x17c>)
 800082e:	f000 f9d2 	bl	8000bd6 <MCAL_GPIO_Init>

//	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	MCAL_GPIO_Write_pin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <LCD_INIT+0x17c>)
 800083a:	f000 fa66 	bl	8000d0a <MCAL_GPIO_Write_pin>
	MCAL_GPIO_Write_pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000844:	480e      	ldr	r0, [pc, #56]	; (8000880 <LCD_INIT+0x17c>)
 8000846:	f000 fa60 	bl	8000d0a <MCAL_GPIO_Write_pin>
	MCAL_GPIO_Write_pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <LCD_INIT+0x17c>)
 8000852:	f000 fa5a 	bl	8000d0a <MCAL_GPIO_Write_pin>

//	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	wait(15);
 8000856:	200f      	movs	r0, #15
 8000858:	f7ff fef6 	bl	8000648 <wait>
	LCD_clear_screen();
 800085c:	f7ff ff10 	bl	8000680 <LCD_clear_screen>
//	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000860:	2038      	movs	r0, #56	; 0x38
 8000862:	f000 f8e3 	bl	8000a2c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000866:	2006      	movs	r0, #6
 8000868:	f000 f8e0 	bl	8000a2c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800086c:	2080      	movs	r0, #128	; 0x80
 800086e:	f000 f8dd 	bl	8000a2c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f8da 	bl	8000a2c <LCD_WRITE_COMMAND>
//	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
//	#endif
//	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
//	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
//	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000003c 	.word	0x2000003c
 8000880:	40010800 	.word	0x40010800

08000884 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	//	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);

	pin_con.GPIO_PinNumber=GPIO_PIN_0;
 8000888:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800088a:	2201      	movs	r2, #1
 800088c:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 800088e:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000890:	2201      	movs	r2, #1
 8000892:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000894:	4963      	ldr	r1, [pc, #396]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000896:	4864      	ldr	r0, [pc, #400]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000898:	f000 f99d 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_1;
 800089c:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800089e:	2202      	movs	r2, #2
 80008a0:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80008a2:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80008a8:	495e      	ldr	r1, [pc, #376]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008aa:	485f      	ldr	r0, [pc, #380]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80008ac:	f000 f993 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_2;
 80008b0:	4b5c      	ldr	r3, [pc, #368]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80008b6:	4b5b      	ldr	r3, [pc, #364]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80008bc:	4959      	ldr	r1, [pc, #356]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008be:	485a      	ldr	r0, [pc, #360]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80008c0:	f000 f989 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_3;
 80008c4:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80008d0:	4954      	ldr	r1, [pc, #336]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008d2:	4855      	ldr	r0, [pc, #340]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80008d4:	f000 f97f 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_4;
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008da:	2210      	movs	r2, #16
 80008dc:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80008de:	4b51      	ldr	r3, [pc, #324]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80008e4:	494f      	ldr	r1, [pc, #316]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008e6:	4850      	ldr	r0, [pc, #320]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80008e8:	f000 f975 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_5;
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008ee:	2220      	movs	r2, #32
 80008f0:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80008f2:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80008f8:	494a      	ldr	r1, [pc, #296]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80008fa:	484b      	ldr	r0, [pc, #300]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80008fc:	f000 f96b 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_6;
 8000900:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000906:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000908:	2201      	movs	r2, #1
 800090a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 800090c:	4945      	ldr	r1, [pc, #276]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800090e:	4846      	ldr	r0, [pc, #280]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000910:	f000 f961 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_7;
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 800091a:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800091c:	2201      	movs	r2, #1
 800091e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000920:	4940      	ldr	r1, [pc, #256]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000922:	4841      	ldr	r0, [pc, #260]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000924:	f000 f957 	bl	8000bd6 <MCAL_GPIO_Init>

//	LCD_CTRL |= (1 << RW_SWITCH);
//	LCD_CTRL &= ~(1 << RS_SWITCH);
	MCAL_GPIO_Write_pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092e:	483e      	ldr	r0, [pc, #248]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000930:	f000 f9eb 	bl	8000d0a <MCAL_GPIO_Write_pin>
	MCAL_GPIO_Write_pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	483b      	ldr	r0, [pc, #236]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 800093c:	f000 f9e5 	bl	8000d0a <MCAL_GPIO_Write_pin>

	LCD_lcd_kick();
 8000940:	f7ff fea6 	bl	8000690 <LCD_lcd_kick>
//	DataDir_LCD_PORT |= (0xFF<<DATA_shift);

	pin_con.GPIO_PinNumber=GPIO_PIN_0;
 8000944:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000946:	2201      	movs	r2, #1
 8000948:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800094a:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800094c:	2204      	movs	r2, #4
 800094e:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000952:	2201      	movs	r2, #1
 8000954:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000956:	4933      	ldr	r1, [pc, #204]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000958:	4833      	ldr	r0, [pc, #204]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 800095a:	f000 f93c 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_1;
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000960:	2202      	movs	r2, #2
 8000962:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000966:	2204      	movs	r2, #4
 8000968:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800096c:	2201      	movs	r2, #1
 800096e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000970:	492c      	ldr	r1, [pc, #176]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000972:	482d      	ldr	r0, [pc, #180]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000974:	f000 f92f 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_2;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800097a:	2204      	movs	r2, #4
 800097c:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000980:	2204      	movs	r2, #4
 8000982:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000986:	2201      	movs	r2, #1
 8000988:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 800098a:	4926      	ldr	r1, [pc, #152]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800098c:	4826      	ldr	r0, [pc, #152]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 800098e:	f000 f922 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_3;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000994:	2208      	movs	r2, #8
 8000996:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 800099a:	2204      	movs	r2, #4
 800099c:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80009a4:	491f      	ldr	r1, [pc, #124]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80009a8:	f000 f915 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_4;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009ae:	2210      	movs	r2, #16
 80009b0:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80009be:	4919      	ldr	r1, [pc, #100]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009c0:	4819      	ldr	r0, [pc, #100]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80009c2:	f000 f908 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_5;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009c8:	2220      	movs	r2, #32
 80009ca:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80009d8:	4912      	ldr	r1, [pc, #72]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80009dc:	f000 f8fb 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_6;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009e2:	2240      	movs	r2, #64	; 0x40
 80009e4:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 80009f2:	490c      	ldr	r1, [pc, #48]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 80009f6:	f000 f8ee 	bl	8000bd6 <MCAL_GPIO_Init>

	pin_con.GPIO_PinNumber=GPIO_PIN_7;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	801a      	strh	r2, [r3, #0]
	pin_con.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	709a      	strb	r2, [r3, #2]
	pin_con.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pin_con);
 8000a0c:	4905      	ldr	r1, [pc, #20]	; (8000a24 <LCD_check_lcd_isbusy+0x1a0>)
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000a10:	f000 f8e1 	bl	8000bd6 <MCAL_GPIO_Init>

//	LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_Write_pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <LCD_check_lcd_isbusy+0x1a4>)
 8000a1c:	f000 f975 	bl	8000d0a <MCAL_GPIO_Write_pin>

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000003c 	.word	0x2000003c
 8000a28:	40010800 	.word	0x40010800

08000a2c <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
//	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 8000a36:	f7ff ff25 	bl	8000884 <LCD_check_lcd_isbusy>
//		LCD_PORT = command;
		MCAL_GPIO_Write_port(LCD_CTRL, command);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <LCD_WRITE_COMMAND+0x44>)
 8000a42:	f000 f979 	bl	8000d38 <MCAL_GPIO_Write_port>
//		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		MCAL_GPIO_Write_pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <LCD_WRITE_COMMAND+0x44>)
 8000a4e:	f000 f95c 	bl	8000d0a <MCAL_GPIO_Write_pin>
		MCAL_GPIO_Write_pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <LCD_WRITE_COMMAND+0x44>)
 8000a5a:	f000 f956 	bl	8000d0a <MCAL_GPIO_Write_pin>
		wait(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff fdf2 	bl	8000648 <wait>
		LCD_lcd_kick();
 8000a64:	f7ff fe14 	bl	8000690 <LCD_lcd_kick>
//		LCD_lcd_kick ();
//		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
//		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
//		LCD_lcd_kick();
//	#endif
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40010800 	.word	0x40010800

08000a74 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR( unsigned char character){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
//	#ifdef EIGHT_BIT_MODE
		//LCD_check_lcd_isbusy();
//		LCD_PORT = character;
		MCAL_GPIO_Write_port(LCD_CTRL, character);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <LCD_WRITE_CHAR+0x40>)
 8000a86:	f000 f957 	bl	8000d38 <MCAL_GPIO_Write_port>
//		LCD_CTRL &= ~(1 << RW_SWITCH);
//		LCD_CTRL |= (1 << RS_SWITCH);
		MCAL_GPIO_Write_pin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <LCD_WRITE_CHAR+0x40>)
 8000a92:	f000 f93a 	bl	8000d0a <MCAL_GPIO_Write_pin>
		MCAL_GPIO_Write_pin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <LCD_WRITE_CHAR+0x40>)
 8000a9e:	f000 f934 	bl	8000d0a <MCAL_GPIO_Write_pin>
		wait(1);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fdd0 	bl	8000648 <wait>
		LCD_lcd_kick();
 8000aa8:	f7ff fdf2 	bl	8000690 <LCD_lcd_kick>
//		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
//		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
//		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
//		LCD_lcd_kick ();
//	#endif
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40010800 	.word	0x40010800

08000ab8 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000ac4:	e01c      	b.n	8000b00 <LCD_WRITE_STRING+0x48>
		count++;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffcd 	bl	8000a74 <LCD_WRITE_CHAR>
		if (count == 16)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b10      	cmp	r3, #16
 8000ade:	d104      	bne.n	8000aea <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fdea 	bl	80006bc <LCD_GOTO_XY>
 8000ae8:	e00a      	b.n	8000b00 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b20      	cmp	r3, #32
 8000aee:	d107      	bne.n	8000b00 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000af0:	f7ff fdc6 	bl	8000680 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fde0 	bl	80006bc <LCD_GOTO_XY>
			count = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1de      	bne.n	8000ac6 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <GET_Postion>:
 */

#include "stm32 f103c6_gpio_driver.h"

uint8_t GET_Postion(uint16_t pin_num)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
	switch(pin_num)
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	2b80      	cmp	r3, #128	; 0x80
 8000b1e:	d042      	beq.n	8000ba6 <GET_Postion+0x96>
 8000b20:	2b80      	cmp	r3, #128	; 0x80
 8000b22:	dc11      	bgt.n	8000b48 <GET_Postion+0x38>
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d036      	beq.n	8000b96 <GET_Postion+0x86>
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	dc06      	bgt.n	8000b3a <GET_Postion+0x2a>
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d02e      	beq.n	8000b8e <GET_Postion+0x7e>
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d02e      	beq.n	8000b92 <GET_Postion+0x82>
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d028      	beq.n	8000b8a <GET_Postion+0x7a>
 8000b38:	e047      	b.n	8000bca <GET_Postion+0xba>
 8000b3a:	2b20      	cmp	r3, #32
 8000b3c:	d02f      	beq.n	8000b9e <GET_Postion+0x8e>
 8000b3e:	2b40      	cmp	r3, #64	; 0x40
 8000b40:	d02f      	beq.n	8000ba2 <GET_Postion+0x92>
 8000b42:	2b10      	cmp	r3, #16
 8000b44:	d029      	beq.n	8000b9a <GET_Postion+0x8a>
 8000b46:	e040      	b.n	8000bca <GET_Postion+0xba>
 8000b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b4c:	d033      	beq.n	8000bb6 <GET_Postion+0xa6>
 8000b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b52:	dc09      	bgt.n	8000b68 <GET_Postion+0x58>
 8000b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b58:	d029      	beq.n	8000bae <GET_Postion+0x9e>
 8000b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b5e:	d028      	beq.n	8000bb2 <GET_Postion+0xa2>
 8000b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b64:	d021      	beq.n	8000baa <GET_Postion+0x9a>
 8000b66:	e030      	b.n	8000bca <GET_Postion+0xba>
 8000b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b6c:	d027      	beq.n	8000bbe <GET_Postion+0xae>
 8000b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b72:	dc03      	bgt.n	8000b7c <GET_Postion+0x6c>
 8000b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b78:	d01f      	beq.n	8000bba <GET_Postion+0xaa>
 8000b7a:	e026      	b.n	8000bca <GET_Postion+0xba>
 8000b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b80:	d01f      	beq.n	8000bc2 <GET_Postion+0xb2>
 8000b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b86:	d01e      	beq.n	8000bc6 <GET_Postion+0xb6>
 8000b88:	e01f      	b.n	8000bca <GET_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e01e      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e01c      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000b92:	2308      	movs	r3, #8
 8000b94:	e01a      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000b96:	230c      	movs	r3, #12
 8000b98:	e018      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	e016      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000b9e:	2314      	movs	r3, #20
 8000ba0:	e014      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000ba2:	2318      	movs	r3, #24
 8000ba4:	e012      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000ba6:	231c      	movs	r3, #28
 8000ba8:	e010      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e00e      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	e00c      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	e00a      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	e008      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	e006      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	e004      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000bc2:	2318      	movs	r3, #24
 8000bc4:	e002      	b.n	8000bcc <GET_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000bc6:	231c      	movs	r3, #28
 8000bc8:	e000      	b.n	8000bcc <GET_Postion+0xbc>
		break;
	default:
		return 0;
 8000bca:	2300      	movs	r3, #0
		break;

	}
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <MCAL_GPIO_Init>:
 * @retval      -none
 * Note         -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *              but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
void MCAL_GPIO_Init(GPIO_TypeDef_t *GPIO_x , GPIO_Pinconfig_t *pin_config)
{
 8000bd6:	b590      	push	{r4, r7, lr}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	volatile uint32_t *config_register=NULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
	uint8_t config_pin;
	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	config_register =(pin_config->GPIO_PinNumber >= GPIO_PIN_8)? &GPIO_x->CRH : &GPIO_x->CRL;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	2bff      	cmp	r3, #255	; 0xff
 8000bea:	d902      	bls.n	8000bf2 <MCAL_GPIO_Init+0x1c>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	e000      	b.n	8000bf4 <MCAL_GPIO_Init+0x1e>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60bb      	str	r3, [r7, #8]

	*(config_register) &=~(0xf << GET_Postion(pin_config->GPIO_PinNumber));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff88 	bl	8000b10 <GET_Postion>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	4093      	lsls	r3, r2
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	601a      	str	r2, [r3, #0]
	if (pin_config->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pin_config->GPIO_MODE == GPIO_MODE_OUTPUT_OD ||pin_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pin_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD )
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d00b      	beq.n	8000c34 <MCAL_GPIO_Init+0x5e>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	789b      	ldrb	r3, [r3, #2]
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d007      	beq.n	8000c34 <MCAL_GPIO_Init+0x5e>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d003      	beq.n	8000c34 <MCAL_GPIO_Init+0x5e>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d10b      	bne.n	8000c4c <MCAL_GPIO_Init+0x76>
	{
		config_pin=(((pin_config->GPIO_MODE - 4) << 2) | pin_config->GPIO_Output_Speed);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	789b      	ldrb	r3, [r3, #2]
 8000c38:	3b04      	subs	r3, #4
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	b25a      	sxtb	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e035      	b.n	8000cb8 <MCAL_GPIO_Init+0xe2>
	}
	else
	{
		if(pin_config->GPIO_MODE == GPIO_MODE_Analog || pin_config->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <MCAL_GPIO_Init+0x86>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d104      	bne.n	8000c66 <MCAL_GPIO_Init+0x90>
		{
			config_pin=(((pin_config->GPIO_MODE ) << 2));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	789b      	ldrb	r3, [r3, #2]
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e028      	b.n	8000cb8 <MCAL_GPIO_Init+0xe2>
		}
		else if(pin_config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d108      	bne.n	8000c80 <MCAL_GPIO_Init+0xaa>
		{
			config_pin=(((pin_config->GPIO_MODE==GPIO_MODE_INPUT_FLO) << 2));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <MCAL_GPIO_Init+0xa4>
 8000c76:	2304      	movs	r3, #4
 8000c78:	e000      	b.n	8000c7c <MCAL_GPIO_Init+0xa6>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e01b      	b.n	8000cb8 <MCAL_GPIO_Init+0xe2>
		}
		else
		{
			config_pin=(((pin_config->GPIO_MODE==GPIO_MODE_INPUT_PU) << 2));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	789b      	ldrb	r3, [r3, #2]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d101      	bne.n	8000c8c <MCAL_GPIO_Init+0xb6>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	e000      	b.n	8000c8e <MCAL_GPIO_Init+0xb8>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/

			if(pin_config->GPIO_MODE == GPIO_MODE_INPUT_PU )
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	789b      	ldrb	r3, [r3, #2]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d107      	bne.n	8000ca8 <MCAL_GPIO_Init+0xd2>
			{
				GPIO_x->ODR |=(pin_config->GPIO_PinNumber);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	8812      	ldrh	r2, [r2, #0]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	e007      	b.n	8000cb8 <MCAL_GPIO_Init+0xe2>
			}
			else
			{
				GPIO_x->ODR &=~(pin_config->GPIO_PinNumber);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(config_register) |=(config_pin << GET_Postion(pin_config->GPIO_PinNumber));
 8000cb8:	7bfc      	ldrb	r4, [r7, #15]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff26 	bl	8000b10 <GET_Postion>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	fa04 f203 	lsl.w	r2, r4, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd90      	pop	{r4, r7, pc}

08000cdc <MCAL_GPIO_Read_pin>:
 * note -                   -none
 */
/**================================================================= */

uint8_t MCAL_GPIO_Read_pin(GPIO_TypeDef_t *GPIO_x ,uint16_t pin_num)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
	uint8_t pin_value;
	if( (GPIO_x->IDR & pin_num) != (uint32_t)GPIO_PIN_RESET )
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <MCAL_GPIO_Read_pin+0x1e>
	{
		pin_value = GPIO_PIN_SET;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <MCAL_GPIO_Read_pin+0x22>
	}
	else
	{
		pin_value = GPIO_PIN_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
	}
	return pin_value;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <MCAL_GPIO_Write_pin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_Write_pin(GPIO_TypeDef_t *GPIO_x ,uint16_t pin_num,uint8_t value)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	807b      	strh	r3, [r7, #2]
 8000d16:	4613      	mov	r3, r2
 8000d18:	707b      	strb	r3, [r7, #1]

	if(value != GPIO_PIN_RESET )
 8000d1a:	787b      	ldrb	r3, [r7, #1]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <MCAL_GPIO_Write_pin+0x1e>
		//GPIO_x->ODR |=(uint32_t) Pin_Number;
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIO_x->BSRR =(uint32_t) pin_num;
 8000d20:	887a      	ldrh	r2, [r7, #2]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIO_x->BRR=(uint32_t) pin_num;
	}
}
 8000d26:	e002      	b.n	8000d2e <MCAL_GPIO_Write_pin+0x24>
		GPIO_x->BRR=(uint32_t) pin_num;
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	615a      	str	r2, [r3, #20]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <MCAL_GPIO_Write_port>:
 * @retval -                -none
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_Write_port(GPIO_TypeDef_t *GPIO_x ,uint16_t value)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
	GPIO_x->ODR=(uint32_t)value;
 8000d44:	887a      	ldrh	r2, [r7, #2]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <__libc_init_array>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	2500      	movs	r5, #0
 8000d58:	4e0c      	ldr	r6, [pc, #48]	; (8000d8c <__libc_init_array+0x38>)
 8000d5a:	4c0d      	ldr	r4, [pc, #52]	; (8000d90 <__libc_init_array+0x3c>)
 8000d5c:	1ba4      	subs	r4, r4, r6
 8000d5e:	10a4      	asrs	r4, r4, #2
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	d109      	bne.n	8000d78 <__libc_init_array+0x24>
 8000d64:	f000 f81a 	bl	8000d9c <_init>
 8000d68:	2500      	movs	r5, #0
 8000d6a:	4e0a      	ldr	r6, [pc, #40]	; (8000d94 <__libc_init_array+0x40>)
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <__libc_init_array+0x44>)
 8000d6e:	1ba4      	subs	r4, r4, r6
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	42a5      	cmp	r5, r4
 8000d74:	d105      	bne.n	8000d82 <__libc_init_array+0x2e>
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d7c:	4798      	blx	r3
 8000d7e:	3501      	adds	r5, #1
 8000d80:	e7ee      	b.n	8000d60 <__libc_init_array+0xc>
 8000d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d86:	4798      	blx	r3
 8000d88:	3501      	adds	r5, #1
 8000d8a:	e7f2      	b.n	8000d72 <__libc_init_array+0x1e>
 8000d8c:	08000de4 	.word	0x08000de4
 8000d90:	08000de4 	.word	0x08000de4
 8000d94:	08000de4 	.word	0x08000de4
 8000d98:	08000de8 	.word	0x08000de8

08000d9c <_init>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	bf00      	nop
 8000da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da2:	bc08      	pop	{r3}
 8000da4:	469e      	mov	lr, r3
 8000da6:	4770      	bx	lr

08000da8 <_fini>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr
